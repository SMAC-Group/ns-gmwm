// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/nsgmwm.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// of_dyn
double of_dyn(arma::vec& theta, arma::mat& nu_hat, arma::vec& x, arma::vec& tau, arma::mat& Omega, bool WN, bool QN, unsigned int AR1);
static SEXP _nsgmwm_of_dyn_try(SEXP thetaSEXP, SEXP nu_hatSEXP, SEXP xSEXP, SEXP tauSEXP, SEXP OmegaSEXP, SEXP WNSEXP, SEXP QNSEXP, SEXP AR1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type nu_hat(nu_hatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< bool >::type WN(WNSEXP);
    Rcpp::traits::input_parameter< bool >::type QN(QNSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type AR1(AR1SEXP);
    rcpp_result_gen = Rcpp::wrap(of_dyn(theta, nu_hat, x, tau, Omega, WN, QN, AR1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _nsgmwm_of_dyn(SEXP thetaSEXP, SEXP nu_hatSEXP, SEXP xSEXP, SEXP tauSEXP, SEXP OmegaSEXP, SEXP WNSEXP, SEXP QNSEXP, SEXP AR1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_nsgmwm_of_dyn_try(thetaSEXP, nu_hatSEXP, xSEXP, tauSEXP, OmegaSEXP, WNSEXP, QNSEXP, AR1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// grad_of_dyn
arma::vec grad_of_dyn(arma::vec& theta, arma::mat& nu_hat, arma::vec& x, arma::vec& tau, arma::mat& Omega, bool WN, bool QN, unsigned int AR1);
static SEXP _nsgmwm_grad_of_dyn_try(SEXP thetaSEXP, SEXP nu_hatSEXP, SEXP xSEXP, SEXP tauSEXP, SEXP OmegaSEXP, SEXP WNSEXP, SEXP QNSEXP, SEXP AR1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type nu_hat(nu_hatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< bool >::type WN(WNSEXP);
    Rcpp::traits::input_parameter< bool >::type QN(QNSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type AR1(AR1SEXP);
    rcpp_result_gen = Rcpp::wrap(grad_of_dyn(theta, nu_hat, x, tau, Omega, WN, QN, AR1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _nsgmwm_grad_of_dyn(SEXP thetaSEXP, SEXP nu_hatSEXP, SEXP xSEXP, SEXP tauSEXP, SEXP OmegaSEXP, SEXP WNSEXP, SEXP QNSEXP, SEXP AR1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_nsgmwm_grad_of_dyn_try(thetaSEXP, nu_hatSEXP, xSEXP, tauSEXP, OmegaSEXP, WNSEXP, QNSEXP, AR1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _nsgmwm_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*of_dyn)(arma::vec&,arma::mat&,arma::vec&,arma::vec&,arma::mat&,bool,bool,unsigned int)");
        signatures.insert("arma::vec(*grad_of_dyn)(arma::vec&,arma::mat&,arma::vec&,arma::vec&,arma::mat&,bool,bool,unsigned int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _nsgmwm_RcppExport_registerCCallable() { 
    R_RegisterCCallable("nsgmwm", "_nsgmwm_of_dyn", (DL_FUNC)_nsgmwm_of_dyn_try);
    R_RegisterCCallable("nsgmwm", "_nsgmwm_grad_of_dyn", (DL_FUNC)_nsgmwm_grad_of_dyn_try);
    R_RegisterCCallable("nsgmwm", "_nsgmwm_RcppExport_validate", (DL_FUNC)_nsgmwm_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_nsgmwm_of_dyn", (DL_FUNC) &_nsgmwm_of_dyn, 8},
    {"_nsgmwm_grad_of_dyn", (DL_FUNC) &_nsgmwm_grad_of_dyn, 8},
    {"_nsgmwm_RcppExport_registerCCallable", (DL_FUNC) &_nsgmwm_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_nsgmwm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
