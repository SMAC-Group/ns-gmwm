// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_nsgmwm_RCPPEXPORTS_H_GEN_
#define RCPP_nsgmwm_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace nsgmwm {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("nsgmwm", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("nsgmwm", "_nsgmwm_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in nsgmwm");
            }
        }
    }

    inline double of_dyn(arma::vec& theta, arma::mat& nu_hat, arma::vec& x, arma::vec& tau, arma::mat& Omega, bool WN, bool QN, unsigned int AR1) {
        typedef SEXP(*Ptr_of_dyn)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_of_dyn p_of_dyn = NULL;
        if (p_of_dyn == NULL) {
            validateSignature("double(*of_dyn)(arma::vec&,arma::mat&,arma::vec&,arma::vec&,arma::mat&,bool,bool,unsigned int)");
            p_of_dyn = (Ptr_of_dyn)R_GetCCallable("nsgmwm", "_nsgmwm_of_dyn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_of_dyn(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(nu_hat)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(tau)), Shield<SEXP>(Rcpp::wrap(Omega)), Shield<SEXP>(Rcpp::wrap(WN)), Shield<SEXP>(Rcpp::wrap(QN)), Shield<SEXP>(Rcpp::wrap(AR1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::vec grad_of_dyn(arma::vec& theta, arma::mat& nu_hat, arma::vec& x, arma::vec& tau, arma::mat& Omega, bool WN, bool QN, unsigned int AR1) {
        typedef SEXP(*Ptr_grad_of_dyn)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_grad_of_dyn p_grad_of_dyn = NULL;
        if (p_grad_of_dyn == NULL) {
            validateSignature("arma::vec(*grad_of_dyn)(arma::vec&,arma::mat&,arma::vec&,arma::vec&,arma::mat&,bool,bool,unsigned int)");
            p_grad_of_dyn = (Ptr_grad_of_dyn)R_GetCCallable("nsgmwm", "_nsgmwm_grad_of_dyn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_grad_of_dyn(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(nu_hat)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(tau)), Shield<SEXP>(Rcpp::wrap(Omega)), Shield<SEXP>(Rcpp::wrap(WN)), Shield<SEXP>(Rcpp::wrap(QN)), Shield<SEXP>(Rcpp::wrap(AR1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

}

#endif // RCPP_nsgmwm_RCPPEXPORTS_H_GEN_
